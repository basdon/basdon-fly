Flighttracker is a service that collects flight mission data and writes it to
{@article=Flight_File_Format Flight} files. This service is implemented as an
{@a=https://github.com/yugecin/anna Anna^} mod.

Flighttracker listens on port {@code 7766}.

{@h3 Packet spec}

<pre>
byte 0: F
byte 1: L
byte 2: Y
byte 3: packet type
</pre>

{@h4(id=p1) Packet type 1: new mission}

Sent when a new mission started.

<pre>
byte 4-7: mission id (DWORD)
byte 8-9: flags (WORD)
= length 10
</pre>

See {@article Flight_file_format} for flag values.

{@h4(id=p2) Packet type 2: mission flight data}

Sent about every second during a mission. When the player goes afk, a packet is
sent with the afk flag, and then no more packets are sent until the player is
back from afk.

<pre>
byte 4-7: mission id (DWORD)
byte 8: flags (BYTE) (see below)
byte 9: passenger satisfaction% [0-100] (BYTE)
byte 10-11: aircraft speed, knots (WORD)
byte 12-13: aircraft altitude (WORD)
byte 14-15: health (WORD)
byte 16-19: fuel level% [0-1] (FLOAT)
byte 20-23: x pos (FLOAT)
byte 24-27: y pos (FLOAT)
byte 28-29: bank in degrees * 10 (WORD)
byte 30-31: pitch in degrees * 10 (WORD)
= length 32
</pre>

Flags (right to left):

<pre>
bit 1: is player paused
bit 2: is engine on
bit 3: is first packet since flight was paused
</pre>

{@h4(id=p3) Packet type 3: mission end}

Sent when the mission ends or pauses.

<pre>
byte 4-7: mission id (DWORD)
= length 8
</pre>

{@h4(id=p4) Packet type 4: server started}

Sent when the server boots, used to close any leftover over missions.

<pre>
= length 4
</pre>

{@h4(id=p5) Packet type 5: mission end}

Sent when the server closes, used to close all active missions.

<pre>
= length 4
</pre>

{@h3 See also}

{@ul
  {@li {@article Flight_file_format}}
}
